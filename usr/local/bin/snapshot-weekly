#!/bin/bash
# ----------------------------------------------------------------------
# Rotating-filesystem-snapshot utility
# ----------------------------------------------------------------------
# Makes weekly snapshots, keeping 4 rotating copies. The most recent
# snapshot is copied with hard links from the oldest daily snapshot,
# therefore this script will not work without the snapshot-daily script.
# ----------------------------------------------------------------------

PATH="/usr/local/bin:/usr/bin:/usr/sbin"

# Logs to systemd journal
Say(){
    echo $1 | systemd-cat -t snapshot-weekly -p $2
}

[[ $EUID -eq 0 ]] || { Say "Need to run as root" "err"; exit 1; }

host=$(hostname)
nas="192.168.1.104"

# $nfs_dest is a locally mounted NFS share, pointing to the NAS backup location
nfs_dest="/mnt/backup/${host}"

# Check if network is up and we can reach the NAS
nas_ping=0
for i in {1..30}; do
   ping -c 1 -W 1 $nas &> /dev/null
   [[ $? -eq 0 ]] && { nas_ping=1; break; }
   sleep 2
done

[[ $nas_ping -eq 1 ]] || { Say "ping to NAS failed" "err"; exit 1; }

# Check if the NFS share is mounted or can be dynamically automounted by systemd
echo "Latest weekly snapshot: $(date)" >> $nfs_dest/.snapshot_weekly 2>/dev/null
[[ $? -eq 0 ]] || { Say "could not write to $nfs_dest" "err"; exit 1; }

# If the snapshot destination is automounted with systemd, this will keep it mounted
cd $nfs_dest

if [[ -d $nfs_dest/daily.6 ]]; then
   Say "creating weekly snapshot of $host" "info"

   # step 1: delete the oldest snapshot, if it exists:
   [[ -d $nfs_dest/weekly.3 ]] && { rm -rf $nfs_dest/weekly.3; }

   # step 2: shift the middle snapshots(s) back by one, if they exist
   [[ -d $nfs_dest/weekly.2 ]] && { mv $nfs_dest/weekly.2 $nfs_dest/weekly.3; }
   [[ -d $nfs_dest/weekly.1 ]] && { mv $nfs_dest/weekly.1 $nfs_dest/weekly.2; }
   [[ -d $nfs_dest/weekly.0 ]] && { mv $nfs_dest/weekly.0 $nfs_dest/weekly.1; }

   # step 3: make a hard-link-only (except for dirs) copy of daily.6 into weekly.0
   [[ -d $nfs_dest/daily.6 ]] && { cp -al $nfs_dest/daily.6 $nfs_dest/weekly.0; }

   # note: do not update the mtime of weekly.0; it will reflect the time when daily.6
   # was made, which should be correct
   Say "finished weekly snapshot of $host" "info"
else
   Say "$nfs_dest/daily.6 does not exist, no need for weekly snapshot" "warning"
fi

exit 0
